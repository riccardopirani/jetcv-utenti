import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LocaleService extends ChangeNotifier {
  static const String _localeKey = 'selected_locale';
  static LocaleService? _instance;
  
  LocaleService._();
  
  static LocaleService get instance {
    _instance ??= LocaleService._();
    return _instance!;
  }

  Locale? _currentLocale;
  
  Locale? get currentLocale => _currentLocale;

  // Lingue supportate con tutti i locale di flutter_localizations
  static const List<Locale> supportedLocales = [
    Locale('af'), // Afrikaans
    Locale('am'), // Amharic
    Locale('ar'), // Arabic
    Locale('as'), // Assamese
    Locale('az'), // Azerbaijani
    Locale('be'), // Belarusian
    Locale('bg'), // Bulgarian
    Locale('bn'), // Bengali
    Locale('bs'), // Bosnian
    Locale('ca'), // Catalan
    Locale('cs'), // Czech
    Locale('cy'), // Welsh
    Locale('da'), // Danish
    Locale('de'), // German
    Locale('el'), // Greek
    Locale('en'), // English
    Locale('es'), // Spanish
    Locale('et'), // Estonian
    Locale('eu'), // Basque
    Locale('fa'), // Persian
    Locale('fi'), // Finnish
    Locale('fil'), // Filipino
    Locale('fr'), // French
    Locale('gl'), // Galician
    Locale('gsw'), // Swiss German
    Locale('gu'), // Gujarati
    Locale('he'), // Hebrew
    Locale('hi'), // Hindi
    Locale('hr'), // Croatian
    Locale('hu'), // Hungarian
    Locale('hy'), // Armenian
    Locale('id'), // Indonesian
    Locale('is'), // Icelandic
    Locale('it'), // Italian
    Locale('ja'), // Japanese
    Locale('ka'), // Georgian
    Locale('kk'), // Kazakh
    Locale('km'), // Khmer
    Locale('kn'), // Kannada
    Locale('ko'), // Korean
    Locale('ky'), // Kyrgyz
    Locale('lo'), // Lao
    Locale('lt'), // Lithuanian
    Locale('lv'), // Latvian
    Locale('mk'), // Macedonian
    Locale('ml'), // Malayalam
    Locale('mn'), // Mongolian
    Locale('mr'), // Marathi
    Locale('ms'), // Malay
    Locale('my'), // Myanmar
    Locale('nb'), // Norwegian Bokm√•l
    Locale('ne'), // Nepali
    Locale('nl'), // Dutch
    Locale('no'), // Norwegian
    Locale('or'), // Odia
    Locale('pa'), // Punjabi
    Locale('pl'), // Polish
    Locale('ps'), // Pashto
    Locale('pt'), // Portuguese
    Locale('ro'), // Romanian
    Locale('ru'), // Russian
    Locale('si'), // Sinhala
    Locale('sk'), // Slovak
    Locale('sl'), // Slovenian
    Locale('sq'), // Albanian
    Locale('sr'), // Serbian
    Locale('sv'), // Swedish
    Locale('sw'), // Swahili
    Locale('ta'), // Tamil
    Locale('te'), // Telugu
    Locale('th'), // Thai
    Locale('tl'), // Tagalog
    Locale('tr'), // Turkish
    Locale('uk'), // Ukrainian
    Locale('ur'), // Urdu
    Locale('uz'), // Uzbek
    Locale('vi'), // Vietnamese
    Locale('zh'), // Chinese
    Locale('zu'), // Zulu
  ];

  // Mappa dei nomi delle lingue per visualizzazione
  static const Map<String, String> languageNames = {
    'af': 'Afrikaans',
    'am': '·ä†·àõ·à≠·äõ',
    'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
    'as': '‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ',
    'az': 'Az…ôrbaycan',
    'be': '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è',
    'bg': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏',
    'bn': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ',
    'bs': 'Bosanski',
    'ca': 'Catal√†',
    'cs': 'ƒåe≈°tina',
    'cy': 'Cymraeg',
    'da': 'Dansk',
    'de': 'Deutsch',
    'el': 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨',
    'en': 'English',
    'es': 'Espa√±ol',
    'et': 'Eesti',
    'eu': 'Euskera',
    'fa': 'ŸÅÿßÿ±ÿ≥€å',
    'fi': 'Suomi',
    'fil': 'Filipino',
    'fr': 'Fran√ßais',
    'gl': 'Galego',
    'gsw': 'Schwiizert√º√ºtsch',
    'gu': '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä',
    'he': '◊¢◊ë◊®◊ô◊™',
    'hi': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
    'hr': 'Hrvatski',
    'hu': 'Magyar',
    'hy': '’Ä’°’µ’•÷Ä’•’∂',
    'id': 'Bahasa Indonesia',
    'is': '√çslenska',
    'it': 'Italiano',
    'ja': 'Êó•Êú¨Ë™û',
    'ka': '·É•·Éê·É†·Éó·É£·Éö·Éò',
    'kk': '“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ',
    'km': '·ûÅ·üí·ûò·üÇ·ûö',
    'kn': '‡≤ï‡≤®‡≥ç‡≤®‡≤°',
    'ko': 'ÌïúÍµ≠Ïñ¥',
    'ky': '–ö—ã—Ä–≥—ã–∑—á–∞',
    'lo': '‡∫•‡∫≤‡∫ß',
    'lt': 'Lietuvi≈≥',
    'lv': 'Latvie≈°u',
    'mk': '–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏',
    'ml': '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç',
    'mn': '–ú–æ–Ω–≥–æ–ª',
    'mr': '‡§Æ‡§∞‡§æ‡§†‡•Ä',
    'ms': 'Bahasa Melayu',
    'my': '·Äô·Äº·Äî·Ä∫·Äô·Ä¨',
    'nb': 'Norsk Bokm√•l',
    'ne': '‡§®‡•á‡§™‡§æ‡§≤‡•Ä',
    'nl': 'Nederlands',
    'no': 'Norsk',
    'or': '‡¨ì‡¨°‡¨º‡¨ø‡¨Ü',
    'pa': '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä',
    'pl': 'Polski',
    'ps': 'Ÿæ⁄öÿ™Ÿà',
    'pt': 'Portugu√™s',
    'ro': 'Rom√¢nƒÉ',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'si': '‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω',
    'sk': 'Slovenƒçina',
    'sl': 'Sloven≈°ƒçina',
    'sq': 'Shqip',
    'sr': '–°—Ä–ø—Å–∫–∏',
    'sv': 'Svenska',
    'sw': 'Kiswahili',
    'ta': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
    'te': '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å',
    'th': '‡πÑ‡∏ó‡∏¢',
    'tl': 'Tagalog',
    'tr': 'T√ºrk√ße',
    'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    'ur': 'ÿßÿ±ÿØŸà',
    'uz': 'O\'zbek',
    'vi': 'Ti·∫øng Vi·ªát',
    'zh': '‰∏≠Êñá',
    'zu': 'IsiZulu',
  };

  // Lingue per cui abbiamo traduzioni complete
  static const List<Locale> fullyTranslatedLocales = [
    Locale('en'),
    Locale('it'),
    Locale('es'),
    Locale('fr'),
    Locale('de'),
  ];

  // Emoji delle bandiere per le lingue supportate
  static const Map<String, String> languageEmojis = {
    'en': 'üá∫üá∏', // English - USA flag
    'it': 'üáÆüáπ', // Italian - Italy flag
    'es': 'üá™üá∏', // Spanish - Spain flag
    'fr': 'üá´üá∑', // French - France flag
    'de': 'üá©üá™', // German - Germany flag
  };

  Future<void> loadSavedLocale() async {
    try {
      // Prima proviamo a caricare la lingua dal profilo utente (se autenticato)
      await _loadLocaleFromUserProfile();
      
      // Se non c'√® lingua nel profilo, carichiamo da SharedPreferences
      if (_currentLocale == null) {
        final prefs = await SharedPreferences.getInstance();
        final savedLocaleCode = prefs.getString(_localeKey);
        
        if (savedLocaleCode != null) {
          _currentLocale = Locale(savedLocaleCode);
        }
      }
      
      notifyListeners();
    } catch (e) {
      debugPrint('Error loading saved locale: $e');
    }
  }

  Future<void> _loadLocaleFromUserProfile() async {
    // Per ora, non carichiamo dal profilo utente per evitare dipendenze circolari
    // Il caricamento dal profilo utente verr√† fatto dall'app principale dopo l'autenticazione
    // Questo metodo rimane per future implementazioni
  }

  Future<void> setLocale(Locale locale) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_localeKey, locale.languageCode);
      
      _currentLocale = locale;
      notifyListeners();
    } catch (e) {
      debugPrint('Error saving locale: $e');
    }
  }

  String getLanguageName(String languageCode) {
    return languageNames[languageCode] ?? languageCode.toUpperCase();
  }

  String? getLanguageEmoji(String languageCode) {
    return languageEmojis[languageCode];
  }

  bool isFullyTranslated(Locale locale) {
    return fullyTranslatedLocales.any((l) => l.languageCode == locale.languageCode);
  }

  /// Carica la lingua dal profilo utente se disponibile
  /// Questo metodo deve essere chiamato dopo il login
  Future<void> loadLanguageFromUserProfile(String? userLanguageCode) async {
    try {
      if (userLanguageCode != null && userLanguageCode.isNotEmpty) {
        final newLocale = Locale(userLanguageCode);
        
        // Verifica che sia una lingua supportata e tradotta
        if (fullyTranslatedLocales.any((l) => l.languageCode == userLanguageCode)) {
          _currentLocale = newLocale;
          
          // Salva anche in SharedPreferences per consistenza
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(_localeKey, userLanguageCode);
          
          notifyListeners();
          debugPrint('‚úÖ Lingua caricata dal profilo utente: $userLanguageCode');
        }
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Errore nel caricare lingua dal profilo utente: $e');
    }
  }
}